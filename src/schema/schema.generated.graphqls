type AuthPayload {
  token: String!
  user: User!
}

type Email {
  body: String
  createdAt: String
  id: ID!
  read: Boolean
  receiver: User!
  sender: User!
  subject: String
}

input EmailFilters {
  read: Boolean
  receiverEmail: String
  senderEmail: String
  subject: String
}

input MarkAsReadInput {
  ids: [ID!]!
}

type MarkAsReadPayload {
  count: Int!
}

type Mutation {
  loginUser(email: String!, password: String!): AuthPayload!
  markAsRead(input: MarkAsReadInput!): MarkAsReadPayload!
  registerUser(input: RegisterUserInput!): AuthPayload!
  sendEmail(input: SendEmail): Email!
}

type Query {
  inbox(filters: EmailFilters, skip: Int = 0, take: Int = 10): [Email!]!
  me: User!
  sentEmail(filters: EmailFilters, skip: Int = 0, take: Int = 10): [Email]!
}

input RegisterUserInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

input SendEmail {
  body: String!
  subject: String
  to: String!
}

type User {
  email: String!
  firstName: String
  id: ID!
  lastName: String
  receivedEmails: [Email!]!
  sentEmails: [Email!]!
}
